
import { useEffect, useRef, memo } from 'react';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Bot, User } from 'lucide-react';
import { cn } from '@/lib/utils';
import type { Message } from '@/lib/types';
import Image from 'next/image';
import { CodeBlock } from './code-block';
import {MemoizedReactMarkdown} from './markdown';
import remarkGfm from 'remark-gfm';
import remarkMath from 'remark-math';

interface ChatMessagesProps {
  messages: Message[];
  isLoading: boolean;
}

function TypingIndicator() {
    return (
        <div className="relative w-2 h-2 rounded-full bg-current text-primary dot-flashing before:w-2 before:h-2 before:rounded-full before:bg-current before:left-[-12px] after:w-2 after:h-2 after:rounded-full after:bg-current after:left-[12px]"/>
    )
}

function GeneratedImage({ src }: { src: string }) {
  return (
    <div className="mt-2 rounded-lg overflow-hidden border border-border/50">
      <Image
        src={src}
        alt="Generated by AI"
        width={400}
        height={400}
        className="object-cover"
        data-ai-hint="generated image"
      />
    </div>
  );
}

const MessageContent = memo(({ message }: { message: Message }) => {
  if (typeof message.text !== 'string') {
    return <>{message.text}</>;
  }

  return (
      <MemoizedReactMarkdown
          className="prose-sm prose-neutral dark:prose-invert prose-p:my-0 prose-pre:my-2"
          remarkPlugins={[remarkGfm, remarkMath]}
          components={{
              p({children}) {
                  return <p className="mb-2 last:mb-0">{children}</p>
              },
              code({node, inline, className, children, ...props}) {
                  if (children.length) {
                      if (children[0] == '▍') {
                          return (
                              <span className="mt-1 animate-pulse cursor-default">▍</span>
                          )
                      }

                      children[0] = (children[0] as string).replace('`▍`', '▍')
                  }

                  const match = /language-(\w+)/.exec(className || '')

                  if (inline) {
                      return (
                          <code className={className} {...props}>
                              {children}
                          </code>
                      )
                  }

                  return (
                      <CodeBlock
                          key={Math.random()}
                          language={(match && match[1]) || ''}
                          code={String(children).replace(/\n$/, '')}
                          {...props}
                      />
                  )
              }
          }}
      >
          {message.text}
      </MemoizedReactMarkdown>
  );
});
MessageContent.displayName = 'MessageContent';


export function ChatMessages({ messages, isLoading }: ChatMessagesProps) {
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, isLoading]);

  return (
    <ScrollArea className="flex-1" ref={scrollAreaRef}>
      <div className="p-4 md:p-6 space-y-6">
        {messages.map((message) => (
          <div
            key={message.id}
            className={cn(
              'flex items-start gap-3 w-full fade-in',
              message.role === 'user' ? 'justify-end' : 'justify-start'
            )}
          >
            {message.role === 'assistant' && (
              <Avatar className="w-8 h-8 border shrink-0">
                <AvatarFallback className="bg-background">
                  <Bot className="text-primary" />
                </AvatarFallback>
              </Avatar>
            )}
            <div
              className={cn(
                'max-w-prose rounded-lg px-4 py-3 shadow-md transition-all duration-300 ease-out hover:shadow-lg hover:-translate-y-px hover:shadow-primary/20',
                message.role === 'user'
                  ? 'bg-primary text-primary-foreground'
                  : 'bg-muted'
              )}
            >
              <div className="text-sm whitespace-pre-wrap space-y-2">
                <MessageContent message={message} />
              </div>
              {message.content && typeof message.content === 'string' && message.content.startsWith('data:image') && (
                 <GeneratedImage src={message.content} />
              )}
            </div>
            {message.role === 'user' && (
              <Avatar className="w-8 h-8 border shrink-0">
                <AvatarFallback className="bg-background">
                  <User className="text-primary" />
                </AvatarFallback>
              </Avatar>
            )}
          </div>
        ))}
        {isLoading && (
           <div className="flex items-start gap-3 w-full justify-start fade-in">
              <Avatar className="w-8 h-8 border shrink-0">
                <AvatarFallback className="bg-background">
                  <Bot className="text-primary" />
                </AvatarFallback>
              </Avatar>
              <div className="max-w-sm md:max-w-md rounded-lg px-4 py-3 bg-muted flex items-center justify-center min-h-[44px]">
                <TypingIndicator />
              </div>
            </div>
        )}
        <div ref={messagesEndRef} />
      </div>
    </ScrollArea>
  );
}
